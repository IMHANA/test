/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-02-08 07:55:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class xml_005fmembers_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Ajax XML</title>\r\n");
      out.write("<script src=\"https://code.jquery.com/jquery-3.5.1.min.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$(\"#getDataBtn\").click(getXmlMembers);\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\tfunction getXmlMembers() {\r\n");
      out.write("\t\talert(\"getXmlMembers() 실행\");\r\n");
      out.write("\t\t//$.ajax(url, {설정값들});\r\n");
      out.write("\t\t$.ajax(\"getXmlMembers\", {\r\n");
      out.write("\t\t\t//url : \"getJsonMembers\",\r\n");
      out.write("\t\t\ttype : \"get\",\r\n");
      out.write("\t\t\tdataType : \"xml\", //응답되는 데이터 형식\r\n");
      out.write("\t\t\tsuccess : function(xmlData){\r\n");
      out.write("\t\t\t\tconsole.log(xmlData);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar tbody = \"\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//전달받은 XML 데이터 처리\r\n");
      out.write("\t\t\t\t$(xmlData).find(\"member\").each(function(){\r\n");
      out.write("\t\t\t\t\ttbody += \"<tr>\";\r\n");
      out.write("\t\t\t\t\ttbody += \"<td>\" + $(this).find(\"idx\").text() + \"</td>\";\t//this는 여기서 다루고 있는 객체 (=member)\r\n");
      out.write("\t\t\t\t\ttbody += \"<td>\" + $(this).find(\"name\").text() + \"</td>\";\t//this는 여기서 다루고 있는 객체 (=member)\r\n");
      out.write("\t\t\t\t\ttbody += \"<td>\" + $(this).find(\"age\").text() + \"</td>\";\t//this는 여기서 다루고 있는 객체 (=member)\r\n");
      out.write("\t\t\t\t\ttbody += \"<td>\" + $(this).find(\"addr\").text() + \"</td>\";\t//this는 여기서 다루고 있는 객체 (=member)\r\n");
      out.write("\t\t\t\t\ttbody += \"<td>\" + $(this).find(\"regdate\").text() + \"</td>\";\t//this는 여기서 다루고 있는 객체 (=member)\r\n");
      out.write("\t\t\t\t\ttbody += \"</tr>\";\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t$(\"#tbody\").html(tbody);\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function(jqXHR, textStatus, errorThrown ){\r\n");
      out.write("\t\t\t\talert(\"[예외발생] Ajax 처리실패!!! \\n\"\r\n");
      out.write("\t\t\t\t\t\t+ \"jqXHR.readyState : \" + jqXHR.readyState + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t+ \"textStatus : \" + textStatus + \"\\n\"\r\n");
      out.write("\t\t\t\t\t\t+ \"errorThrown: \" + errorThrown);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>Ajax XML 데이터 요청처리</h1>\r\n");
      out.write("\t<button id=\"getDataBtn\">XML 데이터 가져오기</button>\r\n");
      out.write("\t<hr>\r\n");
      out.write("\t<table border>\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>번호</th>\r\n");
      out.write("\t\t\t\t<th>이름</th>\r\n");
      out.write("\t\t\t\t<th>나이</th>\r\n");
      out.write("\t\t\t\t<th>주소</th>\r\n");
      out.write("\t\t\t\t<th>날짜</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody id=\"tbody\">\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>1</td>\r\n");
      out.write("\t\t\t\t<td>김유신1</td>\r\n");
      out.write("\t\t\t\t<td>27</td>\r\n");
      out.write("\t\t\t\t<td>서울</td>\r\n");
      out.write("\t\t\t\t<td>2021-02-08</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<td>2</td>\r\n");
      out.write("\t\t\t\t<td>을지문덕2</td>\r\n");
      out.write("\t\t\t\t<td>37</td>\r\n");
      out.write("\t\t\t\t<td>대전</td>\r\n");
      out.write("\t\t\t\t<td>2021-02-08</td>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
