/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.61
 * Generated at: 2021-02-08 15:11:45 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class ex02_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("\t<meta charset=\"UTF-8\">\r\n");
      out.write("\t<title>JS Ajax</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h1>서버로부터 응답 받은 결과</h1>\r\n");
      out.write("<script>\r\n");
      out.write("\t/* XMLHttpRequest.readyState : 데이터를 전달했을때 결과 상태를 표시\r\n");
      out.write("\t0 : 객체 생성되있고, open은 안한 상태\r\n");
      out.write("\t1 : open은 되어있고, send는 안된 상태\r\n");
      out.write("\t2 : send를 진행한 상태지만, 데이터가 발견되지 않은 상태\r\n");
      out.write("\t3 : 일부 데이터만 받은 상태 (데이터를 받는 중)\r\n");
      out.write("\t4 : 데이터를 전부 응답받은 상태\r\n");
      out.write("\t\r\n");
      out.write("\tXMLHttpRequest.status : 응답 결과 상태값\r\n");
      out.write("\t200(성공), 4xx(클라이언트 오류), 5xx(서버측 오류 - 개발자 실수)\r\n");
      out.write("\t********************************/\r\n");
      out.write("\t//1. XMLHttpRequest 객체 생성\r\n");
      out.write("\tvar request = new XMLHttpRequest();\r\n");
      out.write("\t\r\n");
      out.write("\tvar cnt = 1;\r\n");
      out.write("\t// readyState 상태가 변할 때 실행할 콜백함수 작성\r\n");
      out.write("\trequest.onreadystatechange = function() {\r\n");
      out.write("\t\tconsole.log(\"onreadystatechange 실행 : \\n\"\r\n");
      out.write("\t\t\t\t+ (cnt++) + \"번째 실행\\n\"\r\n");
      out.write("\t\t\t\t+ \"readyState : \" + request.readyState + \"\\n\"\r\n");
      out.write("\t\t\t\t+ \"status : \" + request.status);\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\t//2. open(\"전송방식\", \"요청정보\", \"비동기여부\")\r\n");
      out.write("\trequest.open(\"GET\", \"data2.html\");\r\n");
      out.write("\t\r\n");
      out.write("\t//3. send() : 실행\r\n");
      out.write("\trequest.send();\r\n");
      out.write("\t\r\n");
      out.write("\t//4. 응답데이터 처리\r\n");
      out.write("\tdocument.body.innerHTML = request.responseText;\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
